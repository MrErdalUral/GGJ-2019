static int Hash[512] = {
	151,160,137, 91, 90, 15,131, 13,201, 95, 96, 53,194,233,  7,225,
	140, 36,103, 30, 69,142,  8, 99, 37,240, 21, 10, 23,190,  6,148,
	247,120,234, 75,  0, 26,197, 62, 94,252,219,203,117, 35, 11, 32,
	57,177, 33, 88,237,149, 56, 87,174, 20,125,136,171,168, 68,175,
	74,165, 71,134,139, 48, 27,166, 77,146,158,231, 83,111,229,122,
	60,211,133,230,220,105, 92, 41, 55, 46,245, 40,244,102,143, 54,
	65, 25, 63,161,  1,216, 80, 73,209, 76,132,187,208, 89, 18,169,
	200,196,135,130,116,188,159, 86,164,100,109,198,173,186,  3, 64,
	52,217,226,250,124,123,  5,202, 38,147,118,126,255, 82, 85,212,
	207,206, 59,227, 47, 16, 58, 17,182,189, 28, 42,223,183,170,213,
	119,248,152,  2, 44,154,163, 70,221,153,101,155,167, 43,172,  9,
	129, 22, 39,253, 19, 98,108,110, 79,113,224,232,178,185,112,104,
	218,246, 97,228,251, 34,242,193,238,210,144, 12,191,179,162,241,
	81, 51,145,235,249, 14,239,107, 49,192,214, 31,181,199,106,157,
	184, 84,204,176,115,121, 50, 45,127,  4,150,254,138,236,205, 93,
	222,114, 67, 29, 24, 72,243,141,128,195, 78, 66,215, 61,156,180,

	151,160,137, 91, 90, 15,131, 13,201, 95, 96, 53,194,233,  7,225,
	140, 36,103, 30, 69,142,  8, 99, 37,240, 21, 10, 23,190,  6,148,
	247,120,234, 75,  0, 26,197, 62, 94,252,219,203,117, 35, 11, 32,
	57,177, 33, 88,237,149, 56, 87,174, 20,125,136,171,168, 68,175,
	74,165, 71,134,139, 48, 27,166, 77,146,158,231, 83,111,229,122,
	60,211,133,230,220,105, 92, 41, 55, 46,245, 40,244,102,143, 54,
	65, 25, 63,161,  1,216, 80, 73,209, 76,132,187,208, 89, 18,169,
	200,196,135,130,116,188,159, 86,164,100,109,198,173,186,  3, 64,
	52,217,226,250,124,123,  5,202, 38,147,118,126,255, 82, 85,212,
	207,206, 59,227, 47, 16, 58, 17,182,189, 28, 42,223,183,170,213,
	119,248,152,  2, 44,154,163, 70,221,153,101,155,167, 43,172,  9,
	129, 22, 39,253, 19, 98,108,110, 79,113,224,232,178,185,112,104,
	218,246, 97,228,251, 34,242,193,238,210,144, 12,191,179,162,241,
	81, 51,145,235,249, 14,239,107, 49,192,214, 31,181,199,106,157,
	184, 84,204,176,115,121, 50, 45,127,  4,150,254,138,236,205, 93,
	222,114, 67, 29, 24, 72,243,141,128,195, 78, 66,215, 61,156,180
};

static int HashMask = 255;

static float2 Gradients2D[8] = {
	{ 1.0, 0.0 },
	{ -1.0, 0.0 },
	{ 0.0, 1.0 },
	{ 0.0,-1.0 },
	{ 1.0, 1.0 },
	{ -1.0, 1.0 },
	{ -1.0, 1.0 },
	{ 1.0,-1.0 }
};

static int GradientsMask2D = 7;

float Smooth(float t)
{
	return t * t * t * (t * (t * 6 - 15) + 10);
}
float Normalize(float v, float o, float persistance) {
	float x = 0;
	for (int i = 0; i < o; i++)
	{
		x += pow(persistance, i);
	}
	float result = Smooth((v + x) / (x + x));
	if (result < 0)
		result = 0;
	return result;
}
float PerlinValue(float2 p, float f)
{
	p = p * f;
	int x0 = floor(p.x);
	float tx0 = p.x - x0;
	float tx1 = tx0 - 1;
	x0 &= HashMask;
	int x1 = x0 + 1;

	int y0 = floor(p.y);
	float ty0 = p.y - y0;
	float ty1 = ty0 - 1;
	y0 &= HashMask;
	int y1 = y0 + 1;

	float2 g00 = Gradients2D[Hash[x0 + Hash[y0]] & GradientsMask2D];
	float2 g10 = Gradients2D[Hash[x1 + Hash[y0]] & GradientsMask2D];
	float2 g01 = Gradients2D[Hash[x0 + Hash[y1]] & GradientsMask2D];
	float2 g11 = Gradients2D[Hash[x1 + Hash[y1]] & GradientsMask2D];

	float v00 = g00.x * tx0 + g00.y * ty0;
	float v01 = g01.x * tx0 + g01.y * ty1;
	float v10 = g10.x * tx1 + g10.y * ty0;
	float v11 = g11.x * tx1 + g11.y * ty1;

	float tx = Smooth(tx0);
	float ty = Smooth(ty0);

	return lerp(
		lerp(v00, v10, tx),
		lerp(v01, v11, tx),
		ty) / rsqrt(2);
}
float Perlin2D(float2 p, int octaves, float persistance, float lacunarity, float4 octaveOffset[10])
{
	float amplitude = 1.0;
	float frequency = 1.0;
	float result = 0;
	int i;
	float2 temp = p;
	for (i = 0; i < octaves; i++)
	{
		temp = p + octaveOffset[i];
		result += PerlinValue(temp, frequency) * amplitude;
		amplitude *= persistance;
		frequency *= lacunarity;
	}
	return result;
}
float IslandFunction(float2 p, float v, float2 size) {
	float ellipseDist = 16 * (pow((int)p.x / size.x, 2) + pow((int)p.y / size.y, 2));
	if (ellipseDist <= 1.0)
	{
		return v;
	}
	else
	{
		return v - ellipseDist + 1;
	}
}
